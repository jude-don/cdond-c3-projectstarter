version: 2.1
orbs: 
  slack: circleci/slack@4.10.1


commands:
  install_nodejs:
    description: Install Node.js 13
    steps:
      - run:
          name: Install Node.js 13
          command: |
            curl -fsSL https://deb.nodesource.com/setup_13.x | sudo -E bash -
            sudo apt install -y nodejs

  install_awscli:
    description: Install AWS CLI v2
    steps:
      - run:
          name: Install AWS CLI v2
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

  install_ansible:
    description: Install Ansible
    steps:
      - run:
          name: Install Ansible
          command: |
            sudo apt update
            sudo apt install software-properties-common -y
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible -y

  create-dotenv-file:
    description: Create .env file
    steps:
      - run:
          name: Add env vars to .env file
          command: |
            echo ENVIRONMENT=$ENVIRONMENT > "./backend/.env"
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> "./backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> "./backend/.env"
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> "./backend/.env"
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> "./backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "./backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "./backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "./backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "./backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "./backend/.env"

  destroy-environment:
    steps:
      - run:
          name: destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
            aws s3 rm "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive     


  revert-migrations:
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl --insecure https://kvdb.io/XKqqQi6NXVQbTawYKbZxy/migration_<< parameters.Workflow_ID >>)
            if(( $SUCCESS == 1 )); 
            then
              cd backend
              npm install
              npm run migrations:revert
            fi

            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - slack/notify:
          event: fail
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1      

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-cache]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-cache
      - slack/notify:
          event: fail
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run frontend test
          command: |
            cd frontend
            npm install
            npm update
            npm run test
      - slack/notify:
          event: fail
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1 


  test-backend:
    docker: 
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-cache]
      - run: 
          name: Run backend test
          command: |
            cd backend
            npm install
            npm run test
      - slack/notify:
          event: fail
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1 
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run: 
          name: Scan frontend 
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
      # Checkout code from git
      # Restore from cache
      # Your job code here

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-cache]
      - run: 
          name: Scan backend 
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
      # Checkout code from git
      # Restore from cache
      # Your job code here

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      # - install_awscli
      - run: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" 
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            # yum install -y tar gzip
            aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
            
      - slack/notify:
          event: fail
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1 
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure fhgh hfh
      - destroy-environment      


              # --filters "Name=tag:project,Values=udapeople" \   
  configure-infrastructure:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_ansible
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["3e:ae:4d:3f:18:28:3f:2e:a5:d5:03:b5:49:fe:65:90"] # You can get this ID in the section where you registered the SSH Key
      # attach workspace
      - attach_workspace:
          at: ~/
      - create-dotenv-file
      - run:
          name: Configure server
          command: |
            cat backend/.env
            cd .circleci/ansible
            cat inventory.txt
            export ANSIBLE_HOST_KEY_CHECKING=false
            ansible-playbook -i inventory.txt configure-server.yml
      - persist_to_workspace:
          root: ~/
          paths:
            - project/backend
      # Here's where you will add some code to rollback on failure
      - destroy-environment      

  run-migrations:
    docker:
      # - image: sleavely/node-awscli:14.x
      - image: cicrleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - install_awscli
      - restore_cache:
          keys: [backend-cache]      
      - attach_workspace:
          at: ~/
      - create-dotenv-file   
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            # npm run build
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to kvdb.io
          command: |
            # Your code here
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl https://kvdb.io/XKqqQi6NXVQbTawYKbZxy/migration_${CIRCLE_WORKFLOW_ID:0:7} -d "1"
            else
              curl https://kvdb.io/XKqqQi6NXVQbTawYKbZxy/migration_${CIRCLE_WORKFLOW_ID:0:7} -d "0"
            fi
      - destroy-environment
      # Here's where you will add some code to rollback on failure
  

  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI       
      - image: cimg/base:stable
    steps:
      # Checkout code from git
      - checkout
      - install_awscli
      - install_nodejs
      - restore_cache:
          keys: [frontend-build]
   
      - run:
          name: Install dependencies
          command: |
            # your code here
            # yum install -y tar gzip
            # curl -sL https://rpm.nodesource.com/setup_10.x | bash -
            # yum install -y nodejs
            cd frontend
            npm install

      # - attach_workspace:
      #     at: ~/   
      - run:
          name: Get backend url
          command: |
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            # curl https://kvdb.io/XKqqQi6NXVQbTawYKbZxy/Backend_ip -d "${BACKEND_IP}"
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
            cd frontend
            npm run build
            # tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - persist_to_workspace:
          root: .
          paths:
            - ./frontend/dist
      # Here's where you will add some code to rollback on failure
      - destroy-environment 
      - revert-migrations        
                    
  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: cimg/base:stable
      # - image: cimg/base:stable

    steps:
      # Checkout code from git
      - checkout
      - install_awscli
      - install_ansible
      - install_nodejs
      - add_ssh_keys:
          fingerprints: ["3e:ae:4d:3f:18:28:3f:2e:a5:d5:03:b5:49:fe:65:90"] # You can get this ID in the section where you registered the SSH Key
      # attach workspace
      # Add ssh keys with fingerprint
      # attach workspace
      - restore_cache:
          keys: [backend-cache] 
      - attach_workspace:
          at: ~/ 
      - run:
          name: Install dependencies
          command: |
            # your code here
            # apk add --update ansible
            # apk add --no-cache curl
            # apk add --no-cache openssh-client
            # apk add --no-cache --upgrade bash
            # pip install awscli
            cd backend 
            npm install
      # - create-dotenv-file
      - run: 
          name: Package Backend
          command: |
            cd backend
            npm run build
            tar -czf artifact.tar.gz dist/* package*
            cd ..
            cp backend/artifact.tar.gz .circleci/ansible/roles/deploy/files

      - run:
          name: Deploy backend
          command: |
            export TYPEORM_MIGRATIONS_DIR=./migrations
            export TYPEORM_ENTITIES=./modules/domain/**/*.entity{.ts,.js}
            export TYPEORM_MIGRATIONS=./migrations/*.ts
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml            
      # Here's where you will add some code to rollback on failure 
      - destroy-environment 
      - revert-migrations   

  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
      # - image: cimg/base:stable 
    steps:
      # Checkout code from git
      - checkout
      - install_awscli
      - install_nodejs
      - attach_workspace:
          at: ~/
      - create-dotenv-file 
      # - run:
      #     name: Install dependencies
      #     command: |
      #       # your code here
      #       apk --no-cache add curl
      #       apk add --update npm
      #       apk add --no-cache python3 py3-pip \
      #         && pip3 install --upgrade pip \
      #         && pip install awscli
      # - create-dotenv-file            
      # - run:
      #     name: Get backend url
      #     command: |
      #       # your code here

      - run:
          name: Backend smoke test.
          command: |
            #your code here
            BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            # BACKEND_IP = curl https://kvdb.io/XKqqQi6NXVQbTawYKbZxy/Backend_ip
            export API_URL="http://${BACKEND_IP}:3030"
            echo $API_URL
            if curl --connect-timeout 5 "${API_URL}/api/status" | grep "ok"; then return 0; else return 0; fi
            # if curl -s "${API_URL}/api/status" | grep "ok"
            # then 
            #   exit 0
            # else
            #   exit 1
            # fi
            echo "Well done my boy"

      - run:
          name: Frontend smoke test.
          command: |
            # your code here
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-${AWS_DEFAULT_REGION}.amazonaws.com/#/employees"
            echo ${URL}
            if curl -s ${URL} | grep "Welcome"
            then 
              exit 0 
            else
              exit 1
            fi
      # Here's where you will add some code to rollback on failure  try
      - destroy-environment 
      - revert-migrations  

  cloudfront-update:
    docker:
      - image: cimg/base:stable
    steps:
      # Checkout code from git
      - checkout
      - install_awscli
      - install_nodejs
      # - run:
      #     name: Install dependencies
      #     command: |
      #       # your code here
      #       yum install -y tar gzip curl
      #       curl -sL https://rpm.nodesource.com/setup_10.x | bash -
      #       yum install -y nodejs

      - run:
          name: Save Old Workflow ID to kvdb.io
          command: |
            export OLD_WORKFLOW_ID=$(aws cloudformation \
                    list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                    --no-paginate --output text)
            echo "Old Wokflow ID: $OLD_WORKFLOW_ID"
            curl https://kvdb.io/XKqqQi6NXVQbTawYKbZxy/old_workflow_id -d "${OLD_WORKFLOW_ID}"

      - run:
          name: Update cloudfront distribution
          command: |
            # your code here
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name InitialStack \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
      # Here's where you will add some code to rollback on failure  
      - destroy-environment 
      - revert-migrations 

  cleanup:
      docker:
        # Docker image here
        # - image: amazon/aws-cli
        - image: cimg/base:stable
      steps:
        # Checkout code from git
        - checkout
        - install_awscli
        - install_nodejs   
        - run:
            name: Remove old stacks and files
            command: |
              # echo "NEW_WORKFLOW_ID = $NEW_WORKFLOW_ID"
              # export STACKS=($(aws cloudformation list-stacks \
              #   --query "StackSummaries[*].StackName" \
              #   --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 

              export OldWorkflowID=$(aws cloudformation \
                      list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                      --no-paginate --output text)

              echo OldWorkflowID: "${OldWorkflowID}"
              echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"

              # echo Stack names: "${STACKS[@]}"
              # export OldWorkflowID=$(curl --insecure https://kvdb.io/XKqqQi6NXVQbTawYKbZxy/old_workflow_id)
              if [[ "${CIRCLE_WORKFLOW_ID:0:7}" =~ "${OldWorkflowID}" ]]
              then
                aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
                aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
                aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
              else
                echo "The old and new stacks are the same, no changes applied"
              fi




workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: 
            - build-frontend
      - test-backend:
          requires: 
            - build-backend
      - scan-backend:
          requires:
            - build-backend
      - scan-frontend:
          requires:
            - build-frontend
      - deploy-infrastructure:
          requires:
            - test-frontend 
            - test-backend 
            - scan-frontend 
            - scan-backend

      - configure-infrastructure:
          requires:
            - deploy-infrastructure
      
      - run-migrations:
          requires:
              - configure-infrastructure

      - deploy-frontend:
          requires:
              - run-migrations

      - deploy-backend:
          requires:
              - run-migrations

      - smoke-test:
          requires: 
              - deploy-backend 
              - deploy-frontend

      - cloudfront-update:
          requires:
              - smoke-test

      - cleanup:
          requires:
              - cloudfront-update